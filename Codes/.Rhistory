list5[[2]]
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2,E[,i]^3)
X[,i] = iX %*% runif(4,-2,2)
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
# X[,i] = iX %*% runif(4,-2,2)
X[,i] = pnorm(E[,i])
pnorm(E[,i])
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2,E[,i]^3)
# X[,i] = iX %*% runif(4,-2,2)
X[,i] = pnorm(E[,i])
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
system.time(Obj11 <- hlgm2(X, q=10, momentum=0,maxit=30))
iter11 = length(Obj11$B.list)
eval11.list = lapply(1:iter11, function(x)
eval.Omega(Obj11$Omega.list[[x]], Obj11$B.list[[x]], Omega0))
z = lapply(eval11.list, function(x) x$Metrics)
dfq10 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Obj11$Obj))
names(dfq10) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq10
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2,E[,i]^3)
# X[,i] = iX %*% runif(4,-2,2)
X[,i] = E[,i]^2
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
View(Objq5$Omega.list[[1]])
View(Omega0)
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-1,1)
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,2,3)
}
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30),
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.2))
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.2)))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 0.1, -0.4)))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
plot(dfq5$Obj, type='l')
# no momentum
system.time(Obj11 <- hlgm2(X, q=10, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 0.1, -0.4)))
iter11 = length(Obj11$B.list)
eval11.list = lapply(1:iter11, function(x)
eval.Omega(Obj11$Omega.list[[x]], Obj11$B.list[[x]], Omega0))
z = lapply(eval11.list, function(x) x$Metrics)
dfq10 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Obj11$Obj))
names(dfq10) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq10
dfq5
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[1]]))
)
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[1]])), type='l')
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[2]])), type='l')
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[3]])), type='l')
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[3]])),type='l')
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[2]])), lty=2)
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[3]])),type='l')
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[1]])), lty=3)
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[6]][[1]])), lty=3)
vi = 5
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 1
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 2
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 3
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 4
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 5
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
vi = 6
plot(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj11$var.list, function(x) x[[vi]][[1]])), lty=3)
list5[[1]]
plot(list5[[1]]$Obj, type='l')
list10[[1]]
list5[[2]]
plot(list10[[1]]$Obj, type='l')
plot(list5[[2]]$Obj, type='l')
list5[[3]]
##### Generate data
n = 200
p = 20
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,2,3)
}
list100 = list(Objq5,Obj11,Objq20)
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
plot(dfq5$Obj, type='l')
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30),
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.2))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.2))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
# no momentum
system.time(Obj11 <- hlgm2(X, q=10, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.4)))
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.2)))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
for(vi in 1:6){
plot(as.numeric(lapply(Obj5$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj5$var.list, function(x) x[[vi]][[1]])), lty=3)
}
for(vi in 1:6){
plot(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[1]])), lty=3)
}
# no momentum
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.4)))
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
list5[[1]]
list5[[2]]
for(vi in 1:6){
plot(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[1]])), lty=3)
}
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=30,
gamma = sqrt(log(q)/n) * seq(2.1, 1.1, -0.4)))
iterq10 = length(Objq10$B.list)
evalq10.list = lapply(1:iterq10, function(x)
eval.Omega(Objq10$Omega.list[[x]], Objq10$B.list[[x]], Omega0))
z = lapply(evalq10.list, function(x) x$Metrics)
dfq10 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq10$Obj))
names(dfq10) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq10
list5[[2]]
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=20))
iterq10 = length(Objq10$B.list)
evalq10.list = lapply(1:iterq10, function(x)
eval.Omega(Objq10$Omega.list[[x]], Objq10$B.list[[x]], Omega0))
z = lapply(evalq10.list, function(x) x$Metrics)
dfq10 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq10$Obj))
names(dfq10) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq10
dfq5
plot(dfq5$Obj, type='l')
plot(dfq10$Obj, type='l')
list10 = list(Obj5,Objq10)
list10 = list(Objq5,Objq10)
n
n = 300
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=30))
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
iterq5 = length(Objq5$B.list)
evalq5.list = lapply(1:iterq5, function(x)
eval.Omega(Objq5$Omega.list[[x]], Objq5$B.list[[x]], Omega0))
z = lapply(evalq5.list, function(x) x$Metrics)
dfq5 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq5$Obj))
names(dfq5) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq5
n
list5[[1]]
list200 = list10
list200[[1]]
n
dim(X)
plot(dfq5$Obj, type='l')
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=20))
iterq10 = length(Objq10$B.list)
evalq10.list = lapply(1:iterq10, function(x)
eval.Omega(Objq10$Omega.list[[x]], Objq10$B.list[[x]], Omega0))
z = lapply(evalq10.list, function(x) x$Metrics)
dfq10 = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Objq10$Obj))
names(dfq10) = c("TP","TN","TP1","TN1","Sp","Obj")
dfq10
plot(dfq10$Obj, type='l')
dfq5
n
dim(X)
analyze = function(Obj){
iter = length(Obj$B.list)
eval.list = lapply(1:iter, function(x)
eval.Omega(Obj$Omega.list[[x]], Obj$B.list[[x]], Omega0))
z = lapply(eval.list, function(x) x$Metrics)
df = data.frame(cbind(round(matrix(unlist(z),ncol=5, byrow=T),2),
Obj$Obj))
names(df) = c("TP","TN","TP1","TN1","Sp","Obj")
df
}
analyze(Objq5)
analyze(Objq10)
analyze(list100[[1]])
analyze(list100[[2]])
analyze(list200[[1]])
analyze(list200[[2]])
analyze(Objq10)
##### Generate data
n = 400
p = 20
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
dim(X)
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
analyze(Objq5)
# no momentum
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=20))
analyze(Objq10)
analyze(list200[[2]])
plot(analyze(Objq10)$Obj, type='l')
# no momentum
system.time(Objq20 <- hlgm2(X, q=20, momentum=0,maxit=20))
analyze(Objq20)
trace.plot(Obj){
par(mfrow=c(3,2))
for(vi in 1:6){
plot(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[1]])), lty=3)
}
par(mfrow=c(1,1))
}
for(vi in 1:6){
plot(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[1]])), lty=3)
}
trace.plot(Obj){
par(mfrow=c(3,2))
for(vi in 1:6){
plot(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[3]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[1]])), lty=3)
}
par(mfrow=c(1,1))
}
plot(as.numeric(lapply(Obj5$var.list, function(x) x[[vi]][[1]])),
type='l', ylim=c(0,1.5))
plot(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[1]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[3]])), lty=3)
par(mfrow=c(3,2))
for(vi in 1:6){
plot(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[1]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[3]])), lty=3)
}
par(mfrow=c(1,1))
par(mfrow=c(2,3))
for(vi in 1:6){
plot(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[1]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Objq5$var.list, function(x) x[[vi]][[3]])), lty=3)
}
par(mfrow=c(1,1))
trace.plot = function(Obj){
par(mfrow=c(2,3))
for(vi in 1:6){
plot(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[1]])),
type='l', ylim=c(0,1.5))
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[2]])), lty=2)
lines(as.numeric(lapply(Obj$var.list, function(x) x[[vi]][[3]])), lty=3)
}
par(mfrow=c(1,1))
}
trace.plot(Objq10)
trace.plot(Objq20)
##### Generate data
n = 1e3
p = 20
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
analyze(Objq5)
trace.plot(Objq5)
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=20))
analyze(Objq10)
trace.plot(Objq10)
system.time(Objq20 <- hlgm2(X, q=20, momentum=0,maxit=20))
analyze(Objq20)
trace.plot(Objq20)
a = analyze(Objq20)
plot(a$Obj, type='l')
##### Generate data
n = 1e3
p = 30
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
# q=5
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
analyze(Objq5)
trace.plot(Objq5)
trace.plot(Objq5)
a = analyze(Objq5)
plot(a$Obj, type='l')
system.time(Objq10 <- hlgm2(X, q=10, momentum=0,maxit=20))
n = 1e3
p = 40
# then a quadratic polynomial transformation with random coefs
set.seed(rep*11222018)
Omega0 = ThetaMat(p, SNR=1)[[1]]
E = mvrnorm(n, mu=matrix(rep(0,p),ncol=1), Sigma=solve(Omega0))
X = matrix(0,n,p)
for(i in 1:p){
iX = cbind(1,E[,i],E[,i]^2)
X[,i] = iX %*% runif(3,-2,2)
}
system.time(Objq5 <- hlgm2(X, q=5, momentum=0,maxit=20))
a = analyze(Objq5)
plot(a$Obj, type='l')
trace.plot(Objq5)
a
